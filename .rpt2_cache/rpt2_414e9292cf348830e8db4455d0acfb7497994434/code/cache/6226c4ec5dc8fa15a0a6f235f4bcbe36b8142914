{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as React from \"react\";\r\nimport { useGestureResponder } from \"react-gesture-responder\";\r\nimport { animated, interpolate, useSpring } from \"react-spring\";\r\nexport function GridItem(_a) {\r\n    var item = _a.item, top = _a.top, left = _a.left, children = _a.children, i = _a.i, isDragging = _a.dragging, onMove = _a.onMove, mountWithTraverseTarget = _a.mountWithTraverseTarget, grid = _a.grid, disableDrag = _a.disableDrag, endTraverse = _a.endTraverse, onEnd = _a.onEnd;\r\n    var columnWidth = grid.columnWidth, rowHeight = grid.rowHeight;\r\n    var dragging = React.useRef(false);\r\n    var startCoords = React.useRef([left, top]);\r\n    var _b = tslib_1.__read(useSpring(function () {\r\n        if (mountWithTraverseTarget) {\r\n            // this feels really brittle. unsure of a better\r\n            // solution for now.\r\n            return {\r\n                xy: mountWithTraverseTarget,\r\n                immediate: true,\r\n                zIndex: \"1\",\r\n                scale: 1.1,\r\n                opacity: 0.8\r\n            };\r\n            endTraverse();\r\n        }\r\n        return {\r\n            xy: [left, top],\r\n            immediate: true,\r\n            zIndex: \"0\",\r\n            scale: 1,\r\n            opacity: 1\r\n        };\r\n    }), 2), styles = _b[0], set = _b[1];\r\n    // handle move updates imperatively\r\n    function handleMove(state, e) {\r\n        var x = startCoords.current[0] + state.delta[0];\r\n        var y = startCoords.current[1] + state.delta[1];\r\n        set({\r\n            xy: [x, y],\r\n            zIndex: \"1\",\r\n            immediate: true,\r\n            opacity: 0.8,\r\n            scale: 1.1\r\n        });\r\n        onMove(state, x, y);\r\n    }\r\n    // handle end of drag\r\n    function handleEnd(state) {\r\n        var x = startCoords.current[0] + state.delta[0];\r\n        var y = startCoords.current[1] + state.delta[1];\r\n        dragging.current = false;\r\n        onEnd(state, x, y);\r\n    }\r\n    var bind = useGestureResponder({\r\n        onMoveShouldSet: function (state) {\r\n            if (disableDrag) {\r\n                return false;\r\n            }\r\n            startCoords.current = [left, top];\r\n            dragging.current = true;\r\n            return true;\r\n        },\r\n        onMove: handleMove,\r\n        onTerminationRequest: function () {\r\n            if (dragging.current) {\r\n                return false;\r\n            }\r\n            return true;\r\n        },\r\n        onTerminate: handleEnd,\r\n        onRelease: handleEnd\r\n    }, {\r\n        enableMouse: true\r\n    }).bind;\r\n    /**\r\n     * Update our position when left or top\r\n     * values change\r\n     */\r\n    React.useEffect(function () {\r\n        if (!dragging.current) {\r\n            set({\r\n                xy: [left, top],\r\n                zIndex: \"0\",\r\n                opacity: 1,\r\n                scale: 1,\r\n                immediate: false\r\n            });\r\n        }\r\n    }, [dragging.current, left, top]);\r\n    return (React.createElement(animated.div, tslib_1.__assign({}, bind, { style: {\r\n            cursor: \"grab\",\r\n            zIndex: styles.zIndex,\r\n            position: \"absolute\",\r\n            width: columnWidth + \"px\",\r\n            opacity: styles.opacity,\r\n            height: rowHeight + \"px\",\r\n            boxSizing: \"border-box\",\r\n            transform: interpolate([styles.xy, styles.scale], function (xy, s) {\r\n                return \"translate3d(\" + xy[0] + \"px, \" + xy[1] + \"px, 0) scale(\" + s + \")\";\r\n            })\r\n        } }), children(item, i, {\r\n        dragging: isDragging,\r\n        disabled: !!disableDrag,\r\n        grid: grid\r\n    })));\r\n}\r\n","dts":{"name":"/Users/bmcmahen/Web/react-dnd-grid/GridItem.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"react\" />\r\nimport { StateType } from \"react-gesture-responder\";\r\nimport { ChildRender, GridSettings } from \"./grid-types\";\r\ndeclare type GridItemProps<T> = {\r\n    item: T;\r\n    grid: GridSettings;\r\n    onMove: (state: StateType, x: number, y: number) => void;\r\n    i: number;\r\n    endTraverse: () => void;\r\n    disableDrag?: boolean;\r\n    onEnd: (state: StateType, x: number, y: number) => void;\r\n    children: ChildRender<T>;\r\n    dragging: boolean;\r\n    top: number;\r\n    left: number;\r\n    /** values represent the starrt point where the item should mount */\r\n    mountWithTraverseTarget?: [number, number];\r\n};\r\nexport declare function GridItem<T>({ item, top, left, children, i, dragging: isDragging, onMove, mountWithTraverseTarget, grid, disableDrag, endTraverse, onEnd }: GridItemProps<T>): JSX.Element;\r\nexport {};\r\n"}}
